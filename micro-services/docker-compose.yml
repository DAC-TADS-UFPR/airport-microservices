
volumes:
  mongodb-auth-data:
  postgres-cliente-data:
  postgres-flight-data:
  postgres-employee-data:
  postgres-reservation-query-data:
  postgres-reservation-command-data:


services:
  mongodb-auth:
    image: mongo:6
    container_name: mongodb-auth
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: auth_pass
      MONGO_INITDB_DATABASE: auth_db
    volumes:
      - mongodb-auth-data:/data/db
    ports:
      - "27018:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]

  postgres-cliente:
    image: postgres:15
    container_name: postgres-cliente
    environment:
      POSTGRES_DB: cliente_db
      POSTGRES_USER: cliente_user
      POSTGRES_PASSWORD: cliente_pass
    ports:
      - "5433:5432"  
    volumes:
      - postgres-cliente-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cliente_user -d cliente_db"]

  postgres-flight:
    image: postgres:15
    container_name: postgres-flight
    environment:
      POSTGRES_DB: flight_db
      POSTGRES_USER: flight_user
      POSTGRES_PASSWORD: flight_pass
    ports:
      - "5439:5432"  
    volumes:
      - postgres-flight-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flight_user -d flight_db"]

  postgres-employee:
    image: postgres:15
    container_name: postgres-employee
    environment:
      POSTGRES_DB: employee_db
      POSTGRES_USER: employee_user
      POSTGRES_PASSWORD: employee_pass
    ports:
      - "5434:5432"
    volumes:
      - postgres-employee-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U employee_user -d employee_db"]

  postgres-reservation-command:
    image: postgres:15
    container_name: postgres-reservation-command
    environment:
      POSTGRES_DB: reservation_db
      POSTGRES_USER: reservation_user
      POSTGRES_PASSWORD: reservation_pass
    ports:
      - "5437:5432"
    volumes:
      - postgres-reservation-command-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reservation_user -d reservation_db"]

  postgres-reservation-query:
    image: postgres:15
    container_name: postgres-reservation-query
    environment:
      POSTGRES_DB: reservation_db
      POSTGRES_USER: reservation_user
      POSTGRES_PASSWORD: reservation_pass
    ports:
      - "5438:5432"
    volumes:
      - postgres-reservation-query-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reservation_user -d reservation_db"]

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: rabbit_pass
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]

  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - cliente-service
      - flight-service
   
  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "8086:8086"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://root:auth_pass@mongodb-auth:27017/auth_db?authSource=admin
      JWT_SECRET: wu9VYp7NkD3Gq1rLv2xE5zP8cJ6bX9mQ0oA4fK7yH1tS5dF3gU6iW4nM2jR9eB0vC8lO5pI3hT7kY2
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb-auth
 
  cliente-service:
    build: ./cliente-service
    container_name: cliente-service
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-cliente:5432/cliente_db
      SPRING_DATASOURCE_USERNAME: cliente_user
      SPRING_DATASOURCE_PASSWORD: cliente_pass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: rabbit_pass
    depends_on:
      postgres-cliente:
        condition: service_healthy
  
  flight-service:
    build: ./flight-service
    container_name: flight-service
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-flight:5432/flight_db
      SPRING_DATASOURCE_USERNAME: flight_user
      SPRING_DATASOURCE_PASSWORD: flight_pass
    depends_on:
      postgres-flight:
        condition: service_healthy
  employee-service:
    build: ./employee-service
    container_name: employee-service
    ports:
      - "8087:8087"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-employee:5432/employee_db
      SPRING_DATASOURCE_USERNAME: employee_user
      SPRING_DATASOURCE_PASSWORD: employee_pass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: rabbit_pass
    depends_on:
      postgres-employee:
        condition: service_healthy


  reservation-service:
    build: ./reservation-service
    container_name: reservation-service
    ports:
      - "8084:8084"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: rabbit_pass
    depends_on:
      postgres-reservation-query:
        condition: service_healthy
      postgres-reservation-command:
        condition: service_healthy